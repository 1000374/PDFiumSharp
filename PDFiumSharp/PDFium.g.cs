#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using PDFiumSharp.Types;

namespace PDFiumSharp
{
	public static partial class PDFium
	{

		#region FPDF_InitLibrary

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibrary")]
			internal static extern void FPDF_InitLibrary_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibrary")]
			internal static extern void FPDF_InitLibrary_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_InitLibrary/*'/>
		public static void FPDF_InitLibrary()
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.FPDF_InitLibrary_x64();
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.FPDF_InitLibrary_x86();
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_InitLibraryWithConfig

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibraryWithConfig")]
			internal static extern void FPDF_InitLibraryWithConfig_x86(ref FPDF_LIBRARY_CONFIG config);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_InitLibraryWithConfig")]
			internal static extern void FPDF_InitLibraryWithConfig_x64(ref FPDF_LIBRARY_CONFIG config);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_InitLibraryWithConfig/*'/>
		public static void FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.FPDF_InitLibraryWithConfig_x64(ref config);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.FPDF_InitLibraryWithConfig_x86(ref config);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_Create

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Create")]
			internal static extern FPDF_BITMAP FPDFBitmap_Create_x86(int width, int height, bool hasAlpha);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Create")]
			internal static extern FPDF_BITMAP FPDFBitmap_Create_x64(int width, int height, bool hasAlpha);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_Create/*'/>
		public static FPDF_BITMAP FPDFBitmap_Create(int width, int height, bool hasAlpha)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDFBitmap_Create_x64(width, height, hasAlpha);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDFBitmap_Create_x86(width, height, hasAlpha);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_CreateEx

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_CreateEx")]
			internal static extern FPDF_BITMAP FPDFBitmap_CreateEx_x86(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_CreateEx")]
			internal static extern FPDF_BITMAP FPDFBitmap_CreateEx_x64(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_CreateEx/*'/>
		public static FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDFBitmap_CreateEx_x64(width, height, format, first_scan, stride);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDFBitmap_CreateEx_x86(width, height, format, first_scan, stride);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetBuffer

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetBuffer")]
			internal static extern IntPtr FPDFBitmap_GetBuffer_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetBuffer")]
			internal static extern IntPtr FPDFBitmap_GetBuffer_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetBuffer/*'/>
		public static IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDFBitmap_GetBuffer_x64(bitmap);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDFBitmap_GetBuffer_x86(bitmap);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetWidth")]
			internal static extern int FPDFBitmap_GetWidth_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetWidth")]
			internal static extern int FPDFBitmap_GetWidth_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetWidth/*'/>
		public static int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDFBitmap_GetWidth_x64(bitmap);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDFBitmap_GetWidth_x86(bitmap);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetHeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetHeight")]
			internal static extern int FPDFBitmap_GetHeight_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetHeight")]
			internal static extern int FPDFBitmap_GetHeight_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetHeight/*'/>
		public static int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDFBitmap_GetHeight_x64(bitmap);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDFBitmap_GetHeight_x86(bitmap);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_GetStride

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetStride")]
			internal static extern int FPDFBitmap_GetStride_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_GetStride")]
			internal static extern int FPDFBitmap_GetStride_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_GetStride/*'/>
		public static int FPDFBitmap_GetStride(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDFBitmap_GetStride_x64(bitmap);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDFBitmap_GetStride_x86(bitmap);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFBitmap_Destroy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Destroy")]
			internal static extern void FPDFBitmap_Destroy_x86(FPDF_BITMAP bitmap);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFBitmap_Destroy")]
			internal static extern void FPDFBitmap_Destroy_x64(FPDF_BITMAP bitmap);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFBitmap_Destroy/*'/>
		public static void FPDFBitmap_Destroy(FPDF_BITMAP bitmap)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.FPDFBitmap_Destroy_x64(bitmap);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.FPDFBitmap_Destroy_x86(bitmap);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_CreateNewDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CreateNewDocument")]
			internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CreateNewDocument")]
			internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CreateNewDocument/*'/>
		public static FPDF_DOCUMENT FPDF_CreateNewDocument()
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_CreateNewDocument_x64();
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_CreateNewDocument_x86();
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadDocument_x86([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password = null);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadDocument")]
			internal static extern FPDF_DOCUMENT FPDF_LoadDocument_x64([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password = null);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadDocument/*'/>
		public static FPDF_DOCUMENT FPDF_LoadDocument([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password = null)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_LoadDocument_x64(file_path, password);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_LoadDocument_x86(file_path, password);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_CloseDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CloseDocument")]
			internal static extern void FPDF_CloseDocument_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_CloseDocument")]
			internal static extern void FPDF_CloseDocument_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_CloseDocument/*'/>
		public static void FPDF_CloseDocument(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.FPDF_CloseDocument_x64(document);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.FPDF_CloseDocument_x86(document);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadMemDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadMemDocument")]
		
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument_x86(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadMemDocument")]
		
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument_x64(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadMemDocument/*'/>
		private static FPDF_DOCUMENT FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_LoadMemDocument_x64(ref data_buf, size, password);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_LoadMemDocument_x86(ref data_buf, size, password);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadCustomDocument

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadCustomDocument")]
		
			internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument_x86(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadCustomDocument")]
		
			internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument_x64(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadCustomDocument/*'/>
		private static FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_LoadCustomDocument_x64(fileRead, password);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_LoadCustomDocument_x86(fileRead, password);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetFileVersion

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetFileVersion")]
			internal static extern bool FPDF_GetFileVersion_x86(FPDF_DOCUMENT doc, out int fileVersion);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetFileVersion")]
			internal static extern bool FPDF_GetFileVersion_x64(FPDF_DOCUMENT doc, out int fileVersion);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetFileVersion/*'/>
		public static bool FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_GetFileVersion_x64(doc, out fileVersion);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_GetFileVersion_x86(doc, out fileVersion);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetLastError

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetLastError")]
			internal static extern FPDF_ERR FPDF_GetLastError_x86();

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetLastError")]
			internal static extern FPDF_ERR FPDF_GetLastError_x64();
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetLastError/*'/>
		public static FPDF_ERR FPDF_GetLastError()
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_GetLastError_x64();
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_GetLastError_x86();
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageCount

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageCount")]
			internal static extern int FPDF_GetPageCount_x86(FPDF_DOCUMENT document);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageCount")]
			internal static extern int FPDF_GetPageCount_x64(FPDF_DOCUMENT document);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageCount/*'/>
		public static int FPDF_GetPageCount(FPDF_DOCUMENT document)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_GetPageCount_x64(document);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_GetPageCount_x86(document);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_New

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_New")]
			internal static extern FPDF_PAGE FPDFPage_New_x86(FPDF_DOCUMENT document, int page_index, double width, double height);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_New")]
			internal static extern FPDF_PAGE FPDFPage_New_x64(FPDF_DOCUMENT document, int page_index, double width, double height);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_New/*'/>
		public static FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDFPage_New_x64(document, page_index, width, height);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDFPage_New_x86(document, page_index, width, height);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDFPage_Delete

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_Delete")]
			internal static extern void FPDFPage_Delete_x86(FPDF_DOCUMENT document, int page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDFPage_Delete")]
			internal static extern void FPDFPage_Delete_x64(FPDF_DOCUMENT document, int page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDFPage_Delete/*'/>
		public static void FPDFPage_Delete(FPDF_DOCUMENT document, int page_index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.FPDFPage_Delete_x64(document, page_index);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.FPDFPage_Delete_x86(document, page_index);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_LoadPage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadPage")]
			internal static extern FPDF_PAGE FPDF_LoadPage_x86(FPDF_DOCUMENT document, int page_index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_LoadPage")]
			internal static extern FPDF_PAGE FPDF_LoadPage_x64(FPDF_DOCUMENT document, int page_index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_LoadPage/*'/>
		public static FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_LoadPage_x64(document, page_index);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_LoadPage_x86(document, page_index);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_ClosePage

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ClosePage")]
			internal static extern void FPDF_ClosePage_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ClosePage")]
			internal static extern void FPDF_ClosePage_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ClosePage/*'/>
		public static void FPDF_ClosePage(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.FPDF_ClosePage_x64(page);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.FPDF_ClosePage_x86(page);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageWidth

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageWidth")]
			internal static extern double FPDF_GetPageWidth_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageWidth")]
			internal static extern double FPDF_GetPageWidth_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageWidth/*'/>
		public static double FPDF_GetPageWidth(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_GetPageWidth_x64(page);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_GetPageWidth_x86(page);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageHeight

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageHeight")]
			internal static extern double FPDF_GetPageHeight_x86(FPDF_PAGE page);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageHeight")]
			internal static extern double FPDF_GetPageHeight_x64(FPDF_PAGE page);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageHeight/*'/>
		public static double FPDF_GetPageHeight(FPDF_PAGE page)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_GetPageHeight_x64(page);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_GetPageHeight_x86(page);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_GetPageSizeByIndex

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageSizeByIndex")]
			internal static extern bool FPDF_GetPageSizeByIndex_x86(FPDF_DOCUMENT document, int page_index, out double width, out double height);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_GetPageSizeByIndex")]
			internal static extern bool FPDF_GetPageSizeByIndex_x64(FPDF_DOCUMENT document, int page_index, out double width, out double height);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_GetPageSizeByIndex/*'/>
		public static bool FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int page_index, out double width, out double height)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_GetPageSizeByIndex_x64(document, page_index, out width, out height);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_GetPageSizeByIndex_x86(document, page_index, out width, out height);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_RenderPageBitmap

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmap")]
		
			internal static extern void FPDF_RenderPageBitmap_x86(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, RotateOptions rotate = RotateOptions.DontRotate, RenderingFlags flags = RenderingFlags.None);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_RenderPageBitmap")]
		
			internal static extern void FPDF_RenderPageBitmap_x64(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, RotateOptions rotate = RotateOptions.DontRotate, RenderingFlags flags = RenderingFlags.None);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_RenderPageBitmap/*'/>
		public static void FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, RotateOptions rotate = RotateOptions.DontRotate, RenderingFlags flags = RenderingFlags.None)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.FPDF_RenderPageBitmap_x64(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.FPDF_RenderPageBitmap_x86(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_ImportPages

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ImportPages")]
			internal static extern bool FPDF_ImportPages_x86(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_ImportPages")]
			internal static extern bool FPDF_ImportPages_x64(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_ImportPages/*'/>
		public static bool FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_ImportPages_x64(dest_doc, src_doc, pagerange, index);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_ImportPages_x86(dest_doc, src_doc, pagerange, index);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_SaveAsCopy

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveAsCopy")]
			internal static extern bool FPDF_SaveAsCopy_x86(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveAsCopy")]
			internal static extern bool FPDF_SaveAsCopy_x64(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SaveAsCopy/*'/>
		private static bool FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_SaveAsCopy_x64(document, fileWrite, flags);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_SaveAsCopy_x86(document, fileWrite, flags);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

		#region FPDF_SaveWithVersion

		static partial class PlatformInvoke
		{
			[DllImport("pdfium_x86", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveWithVersion")]
			internal static extern bool FPDF_SaveWithVersion_x86(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);

			[DllImport("pdfium_x64", CallingConvention = CallingConvention.StdCall, EntryPoint = "FPDF_SaveWithVersion")]
			internal static extern bool FPDF_SaveWithVersion_x64(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);
		}

		/// <include file='PDFium.xml' path='Documentation/FPDF_SaveWithVersion/*'/>
		private static bool FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion)
		{
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.FPDF_SaveWithVersion_x64(document, fileWrite, flags, fileVersion);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.FPDF_SaveWithVersion_x86(document, fileWrite, flags, fileVersion);
			else
				throw new PlatformNotSupportedException();
		}

		#endregion

	}
}