#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;

namespace PDFiumSharp.Types
{
	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_ACTION
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_ACTION: 0x" + _ptr.ToString("X16");

		public static FPDF_ACTION Null => new FPDF_ACTION();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_BITMAP
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_BITMAP: 0x" + _ptr.ToString("X16");

		public static FPDF_BITMAP Null => new FPDF_BITMAP();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_BOOKMARK
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_BOOKMARK: 0x" + _ptr.ToString("X16");

		public static FPDF_BOOKMARK Null => new FPDF_BOOKMARK();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_CLIPPATH
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_CLIPPATH: 0x" + _ptr.ToString("X16");

		public static FPDF_CLIPPATH Null => new FPDF_CLIPPATH();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_DEST
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_DEST: 0x" + _ptr.ToString("X16");

		public static FPDF_DEST Null => new FPDF_DEST();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_DOCUMENT
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_DOCUMENT: 0x" + _ptr.ToString("X16");

		public static FPDF_DOCUMENT Null => new FPDF_DOCUMENT();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_FONT
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_FONT: 0x" + _ptr.ToString("X16");

		public static FPDF_FONT Null => new FPDF_FONT();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_LINK
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_LINK: 0x" + _ptr.ToString("X16");

		public static FPDF_LINK Null => new FPDF_LINK();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGE
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_PAGE: 0x" + _ptr.ToString("X16");

		public static FPDF_PAGE Null => new FPDF_PAGE();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGELINK
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_PAGELINK: 0x" + _ptr.ToString("X16");

		public static FPDF_PAGELINK Null => new FPDF_PAGELINK();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGEOBJECT
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_PAGEOBJECT: 0x" + _ptr.ToString("X16");

		public static FPDF_PAGEOBJECT Null => new FPDF_PAGEOBJECT();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_PAGERANGE
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_PAGERANGE: 0x" + _ptr.ToString("X16");

		public static FPDF_PAGERANGE Null => new FPDF_PAGERANGE();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_RECORDER
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_RECORDER: 0x" + _ptr.ToString("X16");

		public static FPDF_RECORDER Null => new FPDF_RECORDER();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_SCHHANDLE
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_SCHHANDLE: 0x" + _ptr.ToString("X16");

		public static FPDF_SCHHANDLE Null => new FPDF_SCHHANDLE();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_STRUCTELEMENT
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_STRUCTELEMENT: 0x" + _ptr.ToString("X16");

		public static FPDF_STRUCTELEMENT Null => new FPDF_STRUCTELEMENT();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_STRUCTTREE
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_STRUCTTREE: 0x" + _ptr.ToString("X16");

		public static FPDF_STRUCTTREE Null => new FPDF_STRUCTTREE();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_TEXTPAGE
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_TEXTPAGE: 0x" + _ptr.ToString("X16");

		public static FPDF_TEXTPAGE Null => new FPDF_TEXTPAGE();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_STRINGHANDLE
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_STRINGHANDLE: 0x" + _ptr.ToString("X16");

		public static FPDF_STRINGHANDLE Null => new FPDF_STRINGHANDLE();
	}

	[StructLayout(LayoutKind.Sequential)]
    public struct FPDF_WIDGET
	{
		readonly IntPtr _ptr;

		public bool IsNull => _ptr == IntPtr.Zero;
		public override string ToString() => "FPDF_WIDGET: 0x" + _ptr.ToString("X16");

		public static FPDF_WIDGET Null => new FPDF_WIDGET();
	}

}