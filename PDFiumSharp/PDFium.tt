<# /*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/ #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
const string DllName32 = "pdfium_x86";
const string DllName64 = "pdfium_x64";
const string CallingConvention = "CallingConvention.StdCall";

string[] Imports = {
	// https://pdfium.googlesource.com/pdfium/+/master/public/fpdfview.h
	"public;void;FPDF_InitLibrary()",
	"public;void;FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config)",
	"private;void;FPDF_DestroyLibrary()",
	"public;FPDF_DOCUMENT;FPDF_LoadDocument([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password = null)",
	"private;FPDF_DOCUMENT;FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);",
	"private;FPDF_DOCUMENT;FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);",
	"public;bool;FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion)",
	"public;FPDF_ERR;FPDF_GetLastError()",
	"public;DocumentPermissions;FPDF_GetDocPermissions(FPDF_DOCUMENT document)",
	"public;int;FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document)",
	"public;int;FPDF_GetPageCount(FPDF_DOCUMENT document)",
	"public;FPDF_PAGE;FPDF_LoadPage(FPDF_DOCUMENT document, int page_index)",
	"public;double;FPDF_GetPageWidth(FPDF_PAGE page)",
	"public;double;FPDF_GetPageHeight(FPDF_PAGE page)",
	"public;bool;FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int page_index, out double width, out double height)",
	"public;void;FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotation = PageOrientations.Normal, RenderingFlags flags = RenderingFlags.None);",
	"public;void;FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, FS_MATRIX matrix, FS_RECTF clipping, RenderingFlags flags = RenderingFlags.None)",
	"public;void;FPDF_ClosePage(FPDF_PAGE page)",
	"public;void;FPDF_CloseDocument(FPDF_DOCUMENT document)",
	"public;void;FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y)",
	"public;void;FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y)",
	"public;FPDF_BITMAP;FPDFBitmap_Create(int width, int height, bool hasAlpha)",
	"public;FPDF_BITMAP;FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride)",
	"public;void;FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color)",
	"public;IntPtr;FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap)",
	"public;int;FPDFBitmap_GetWidth(FPDF_BITMAP bitmap)",
	"public;int;FPDFBitmap_GetHeight(FPDF_BITMAP bitmap)",
	"public;int;FPDFBitmap_GetStride(FPDF_BITMAP bitmap)",
	"public;void;FPDFBitmap_Destroy(FPDF_BITMAP bitmap)",
	"public;bool;FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document)",
	"public;int;FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document)",
	"public;FPDF_PAGERANGE;FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document)",
	"public;DuplexTypes;FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document)",
	"private;uint;FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length)",
	"public;int;FPDF_CountNamedDests(FPDF_DOCUMENT document)",
	"public;FPDF_DEST;FPDF_GetNamedDestByName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name)",
	"private;FPDF_DEST;FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, ref char buffer, ref int buflen)",

	// https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_edit.h
	"public;FPDF_DOCUMENT;FPDF_CreateNewDocument()",
	"public;FPDF_PAGE;FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height)",
	"public;void;FPDFPage_Delete(FPDF_DOCUMENT document, int page_index)",
	"public;PageOrientations;FPDFPage_GetRotation(FPDF_PAGE page)",
	"public;void;FPDFPage_SetRotation(FPDF_PAGE page, PageOrientations rotation)",
	
	// https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_ppo.h
	"public;bool;FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index)",
	"public;bool;FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc)",

	// https://pdfium.googlesource.com/pdfium/+/master/public/fpdf_save.h
	"private;bool;FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags)",
	"private;bool;FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion)" };

// --------------------------------------------------------- Code End ----------------------------------------------------- #>
#region Copyright and License
/*
This file is part of PDFiumSharp, a wrapper around the PDFium library for the .NET framework.
Copyright (C) 2017 Tobias Meyer
License: Microsoft Reciprocal License (MS-RL)
*/
#endregion

// AUTOGENERATED FILE
// DO NOT MODIFY
using System;
using System.Runtime.InteropServices;
using PDFiumSharp.Types;

namespace PDFiumSharp
{
	public static partial class PDFium
	{
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
foreach (string import in Imports)
{
	string[] parts = import.Split(';');
	string accessModifier = parts[0];
	string returnType = parts[1];
	int idxBracket = parts[2].IndexOf('(');
	string name = parts[2].Substring(0, idxBracket);
	string argumentList = parts[2].Substring(idxBracket);

	string args = string.Empty;
	var tmpArgList = argumentList.TrimStart('(').TrimEnd(')').Split(',');
	foreach (var tmp in tmpArgList)
	{
		var argDecl = tmp.Split('=')[0].TrimEnd();
		if (argDecl.Contains("ref "))
			args += "ref ";
		else if (argDecl.Contains("out "))
			args += "out ";
		args += argDecl.Split(' ').Last() + ", ";
	}
	if (!string.IsNullOrEmpty(args))
		args = args.Substring(0, args.Length - 2);

	string attributes = string.Empty;
	for (int i = 3; i < parts.Length; i++)
		attributes += Environment.NewLine+"\t\t" + parts[i];
// --------------------------------------------------------- Code End ----------------------------------------------------- #>

		#region <#=name#>

		static partial class PlatformInvoke
		{
			[DllImport("<#=DllName32#>", CallingConvention = <#=CallingConvention#>, EntryPoint = "<#=name#>")]<#=attributes#>
			internal static extern <#=returnType#> <#=name#>_x86<#=argumentList#>;

			[DllImport("<#=DllName64#>", CallingConvention = <#=CallingConvention#>, EntryPoint = "<#=name#>")]<#=attributes#>
			internal static extern <#=returnType#> <#=name#>_x64<#=argumentList#>;
		}

		/// <include file='PDFium.xml' path='Documentation/<#=name#>/*'/>
		<#=accessModifier#> static <#=returnType#> <#=name#><#=argumentList#>
		{
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
	if (returnType == "void")
	{
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				PlatformInvoke.<#=name#>_x64(<#=args#>);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				PlatformInvoke.<#=name#>_x86(<#=args#>);
			else
				throw new PlatformNotSupportedException();
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
	}
	else
	{
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
			if (RuntimeInformation.ProcessArchitecture == Architecture.X64)
				return PlatformInvoke.<#=name#>_x64(<#=args#>);
			else if (RuntimeInformation.ProcessArchitecture == Architecture.X86)
				return PlatformInvoke.<#=name#>_x86(<#=args#>);
			else
				throw new PlatformNotSupportedException();
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
	}
// --------------------------------------------------------- Code End ----------------------------------------------------- #>
		}

		#endregion
<# // ------------------------------------------------------ Code Start ------------------------------------------------------
}
// --------------------------------------------------------- Code End ----------------------------------------------------- #>

	}
}